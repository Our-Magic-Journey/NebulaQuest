sourceCompatibility = JavaVersion.VERSION_16
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../assets"]

mainClassName = "xyz.magicjourney.nebulaquest.desktop.DesktopLauncher"
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
project.ext.assetsDir = new File("../assets")

import org.gradle.internal.os.OperatingSystem

tasks.register('runDev', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    destinationDirectory = file("$buildDir/lib")
}

tasks.create('release', Zip) {
    dependsOn jpackageImage

    from './build/jpackage/desktop'

    if (osName.contains("windows")) {
        archiveFileName.set("nebula-quest-windows.zip");
    }
    else {
        archiveFileName.set("nebula-quest-linux.zip");
    }

    destinationDirectory.set(file('../release'))
}

tasks.create('releaseInstaller', Zip) {
    dependsOn jpackageImage

    from './build/install/desktop'

    if (osName.contains("windows")) {
        archiveFileName.set("nebula-quest-windows-installer.zip");
    }
    else {
        archiveFileName.set("nebula-quest-linux-installer.zip");
    }

    destinationDirectory.set(file('../release'))
}

jpackageImage.dependsOn dist
dist.dependsOn classes
eclipse.project.name = appName + "-desktop"

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        mainJar = dist.archiveFileName.get()
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("../icons/logo.ico")]
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../icons/logo.png")]
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../icons/logo.icns")]
        }
    }
}